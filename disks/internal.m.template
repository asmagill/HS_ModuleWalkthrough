#import <Cocoa/Cocoa.h>
#import <LuaSkin/LuaSkin.h>
#import "hammerspoon.h"

// #define USERDATA_TAG        "hs._asm.module"
int refTable ;

// this is where the core functionality should go
//
// static int moduleFunction(lua_State *L) {
//  ... code here ...
//   return 1 ;
// }

// static int userdata_tostring(lua_State* L) {
//     return 1 ;
// }

// static int userdata_gc(lua_State* L) {
//     return 0 ;
// }

// static int meta_gc(lua_State* __unused L) {
//     return 0 ;
// }

// Metatable for userdata objects
// static const luaL_Reg userdata_metaLib[] = {
//     {"__tostring", userdata_tostring},
//     {"__gc",       userdata_gc},
//     {NULL,         NULL}
// };

// Functions for returned object when module loads
static luaL_Reg moduleLib[] = {
    {NULL, NULL}
};

// // Metatable for module, if needed
// static const luaL_Reg module_metaLib[] = {
//     {"__gc", meta_gc},
//     {NULL,   NULL}
// };

// NOTE: ** Make sure to change luaopen_..._internal **
int luaopen_hs__asm_module_internal(lua_State* L) {
    LuaSkin *skin = [LuaSkin shared];
// Use this if your module doesn't have a module specific object that it returns.
//    refTable = [skin registerLibrary:moduleLib metaFunctions:nil] ; // or module_metaLib
// Use this if at least some of your functions return or act on a specific object unique to this module
    refTable = [skin registerLibraryWithObject:USERDATA_TAG
                                     functions:moduleLib
                                 metaFunctions:nil    // nil or module_metaLib
                               objectFunctions:userdata_metaLib ];

    return 1;
}
